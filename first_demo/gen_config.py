#!/usr/bin/env python3
from kconfiglib import Kconfig, Symbol, BOOL, TRISTATE, INT, STRING

kconf = Kconfig('Kconfig')

# Load existing config or create default
try:
    kconf.load_config('.config')
except:
    kconf.write_config('.config')

# Generate config.h
with open('config.h', 'w') as f:
    f.write("/* Generated by Kconfig */\n#ifndef CONFIG_H\n#define CONFIG_H\n\n")
    for name, sym in kconf.syms.items():
        if not isinstance(sym, Symbol):
            continue
        if sym.type in (BOOL, TRISTATE) and sym.tri_value == 2:  # =y
            f.write(f"#define CONFIG_{name} 1\n")
        elif sym.type == INT:
            f.write(f"#define CONFIG_{name} {sym.str_value}\n")
        elif sym.type == STRING:
            f.write(f'#define CONFIG_{name} "{sym.str_value}"\n')
        elif sym.type == TRISTATE:
            if sym.tri_value == 2:  # y
                f.write(f"#define CONFIG_{name} 1\n")
                f.write(f"#define CONFIG_{name}_MODULE 0\n")
            elif sym.tri_value == 1:  # m
                f.write(f"#define CONFIG_{name} 1\n")
                f.write(f"#define CONFIG_{name}_MODULE 1\n")
            # n: 不定义
    f.write("\n#endif\n")

print("✅ config.h generated")